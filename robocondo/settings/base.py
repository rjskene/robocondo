"""
Django settings for robocondo project.

Generated by "django-admin startproject" using Django 2.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
from decouple import config, Csv

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

SECRET_KEY = config("SECRET_KEY")
DEBUG = config("DEBUG", cast=bool)
ALLOWED_HOSTS = config("ALLOWED_HOSTS", cast=Csv())


# Application definition

ROCO_APPS = [
    "accountmanager.apps.AccountManagerConfig",
    "userprofile.apps.UserprofileConfig",
    "condo.apps.CondoConfig",
    "reservefundstudy.apps.ReserveFundStudyConfig",
    "pyondo.apps.PyondoConfig",
    "investmentplan.apps.InvestmentPlanConfig",
    "pyyc.apps.PyycConfig",
    "gic_select.apps.GicSelectConfig",
    "rcdemo.apps.RcdemoConfig",
    "analysis.apps.AnalysisConfig"
]

DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_celery_results",
    "django_celery_beat",
    "rest_framework",
    "django_tables2",
    "django_select2",
    "widget_tweaks",
    "django_nose",
    "guardian",
]

INSTALLED_APPS = ROCO_APPS + DJANGO_APPS

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "robocondo.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
                    os.path.join(BASE_DIR, "robocondo/templates"),
                ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "robocondo.wsgi.application"

# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": config("DB_NAME"),
        "USER": config("DB_USER"),
        "PASSWORD": config("DB_PASSWORD"),
        "HOST": config("DB_HOST"),
        "PORT": "5432",
    }
}
# Heroku: Update database configuration from $DATABASE_URL.
import dj_database_url
db_from_env = dj_database_url.config(conn_max_age=500)
DATABASES['default'].update(db_from_env)

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
    "django.contrib.auth.hashers.BCryptPasswordHasher",
]

# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = "/static/"
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "robocondo/static"),
    os.path.join(BASE_DIR, "investmentplan/static"),
    os.path.join(BASE_DIR, "condo/static")
]

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

#MY CUSTOM settings
ENV_PATH = os.path.abspath(os.path.dirname(__file__))
MEDIA_ROOT = os.path.join(ENV_PATH, 'media/')

# My Custom settings
LOGIN_URL = "/login/"
LOGOUT_URL = "/login/"
LOGOUT_REDIRECT_URL = "/login/"
SESSION_COOKIE_SECURE = False
SESSION_SAVE_EVERY_REQUEST = True
SESSION_COOKIE_AGE = 30*60

AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend", # this is default
    "guardian.backends.ObjectPermissionBackend", # for django-guardian object permissions
)

# Test Settings for Coverage/Nose
# TEST_RUNNER = "django_nose.NoseTestSuiteRunner"
# NOSE_ARGS = [
#     "--nocapture",
#     "--nologcapture",
#     "--with-coverage",
#     "--cover-package=accountmanager,userprofile,condo,reservefundstudy,pyondo,investmentplan",
#     "--cover-inclusive",
# ]

# CELERY Settings
CELERY_ENABLE_UTC = True
CELERY_TIMEZONE = "UTC"
CELERY_BROKER_URL= config("REDIS_URL")
CELERY_RESULT_BACKEND = config("REDIS_URL")

CELERY_TASK_SERIALIZER = "json"
CELERY_ACCEPT_CONTENT = ["application/json"]
CELERY_RESULT_SERIALIZER = "json"

# We don"t want to have dead connections stored on message broker, so we have to negotiate using heartbeats
BROKER_HEARTBEAT = "?heartbeat=600"
if not CELERY_BROKER_URL.endswith(BROKER_HEARTBEAT):
    CELERY_BROKER_URL += BROKER_HEARTBEAT

# BROKER_POOL_LIMIT = 1
# BROKER_CONNECTION_TIMEOUT = 10

# Celery configuration

# Sensible settings for celery

# TESTING SETTING!!!!
# CELERY_ACKS_LATE = True
# CELERY_TASK_PUBLISH_RETRY = True
# CELERY_DISABLE_RATE_LIMITS = False

# By default we will ignore result
# If you want to see results and try out tasks interactively, change it to False
# Or change this setting on tasks level
# CELERY_IGNORE_RESULT = False
# CELERY_SEND_TASK_ERROR_EMAILS = False
# CELERY_TASK_RESULT_EXPIRES = 600

# CELERYD_HIJACK_ROOT_LOGGER = False
# CELERYD_PREFETCH_MULTIPLIER = 1
