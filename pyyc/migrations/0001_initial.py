# Generated by Django 2.1.3 on 2018-12-13 01:29

import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Cointegration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('p', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(60)], verbose_name='p-value for Cointegration Test')),
                ('deterministic', models.CharField(choices=[('NC', 'nc'), ('C', 'c'), ('CT', 'ct')], default='', max_length=3, verbose_name='Deterministic')),
                ('root_crit', models.CharField(choices=[('ONE', '1%'), ('FIVE', '5%'), ('TEN', '10%')], default='', max_length=10, verbose_name='Critical Value for Root Test')),
                ('any_roots', models.BooleanField(verbose_name='Output Gap')),
                ('diffs_to_stationary', models.IntegerField(verbose_name='Differences to make Stationary')),
                ('rank', models.IntegerField(null=True, verbose_name='Cointegration Rank')),
                ('signif', models.CharField(choices=[('NINETY', '90%'), ('NINETY_FIVE', '95%'), ('NINETY_NINE', '99%'), ('NULL', 'Null Significance')], max_length=50, null=True, verbose_name='Cointegration Signficance')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='Date and Time Added')),
                ('date_modified', models.DateTimeField(auto_now=True, verbose_name='Date and Time Modified')),
            ],
        ),
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Forecast',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('process_time', models.FloatField(verbose_name='Process Time')),
                ('set_rmses', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('total_rmse', models.FloatField(verbose_name='Total RMSE of Test')),
                ('projected', django.contrib.postgres.fields.jsonb.JSONField(verbose_name='Projected Yield Curve')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='Date and Time Added')),
                ('date_modified', models.DateTimeField(auto_now=True, verbose_name='Date and Time Modified')),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pyyc.Dataset')),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalOvernightRate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(unique=True, verbose_name='Date')),
                ('rate', models.FloatField(verbose_name='Bank Rate')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='Date and Time Added')),
                ('date_modified', models.DateTimeField(auto_now=True, verbose_name='Date and Time Modified')),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalYieldCurve',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(unique=True, verbose_name='Date')),
                ('three_month', models.FloatField(verbose_name=' ZC025YR')),
                ('six_month', models.FloatField(verbose_name='ZC050YR')),
                ('one_year', models.FloatField(verbose_name='ZC100YR')),
                ('two_year', models.FloatField(verbose_name='ZC200YR')),
                ('three_year', models.FloatField(verbose_name='ZC300YR')),
                ('five_year', models.FloatField(verbose_name='ZC500YR')),
                ('seven_year', models.FloatField(verbose_name='ZC700YR')),
                ('ten_year', models.FloatField(verbose_name='ZC1000YR')),
                ('twenty_five_year', models.FloatField(verbose_name='ZC2500YR')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='Date and Time Added')),
                ('date_modified', models.DateTimeField(auto_now=True, verbose_name='Date and Time Modified')),
            ],
        ),
        migrations.CreateModel(
            name='InflationRate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(unique=True, verbose_name='Date')),
                ('cpi_rate', models.FloatField(verbose_name='CPI Change')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='Date and Time Added')),
                ('date_modified', models.DateTimeField(auto_now=True, verbose_name='Date and Time Modified')),
            ],
        ),
        migrations.CreateModel(
            name='OutputGap',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(unique=True, verbose_name='Date')),
                ('output_gap', models.FloatField(verbose_name='Output Gap')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='Date and Time Added')),
                ('date_modified', models.DateTimeField(auto_now=True, verbose_name='Date and Time Modified')),
            ],
        ),
        migrations.CreateModel(
            name='PrincipalComponents',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='Principal Component Data')),
                ('n', models.IntegerField(blank=True, null=True, verbose_name='Number of Principal Components')),
                ('explained', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), blank=True, null=True, size=None)),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='Date and Time Added')),
                ('date_modified', models.DateTimeField(auto_now=True, verbose_name='Date and Time Modified')),
            ],
        ),
        migrations.CreateModel(
            name='RAW',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('orig_json', django.contrib.postgres.fields.jsonb.JSONField(verbose_name='Original Historical Data')),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(verbose_name='Original or Differenced Data')),
                ('last_date', models.DateField(verbose_name='Last Date in Dataset')),
                ('inflation', models.BooleanField(verbose_name='Inflation')),
                ('output_gap', models.BooleanField(verbose_name='Output Gap')),
                ('n_diffs', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(60)], verbose_name='Number of Differences')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='Date and Time Added')),
                ('date_modified', models.DateTimeField(auto_now=True, verbose_name='Date and Time Modified')),
            ],
        ),
        migrations.CreateModel(
            name='Technique',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='VAR',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('p', models.IntegerField(default=0, unique=True, verbose_name='p-value for VAR')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='Date and Time Added')),
                ('date_modified', models.DateTimeField(auto_now=True, verbose_name='Date and Time Modified')),
            ],
        ),
        migrations.CreateModel(
            name='VARMA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('p', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(60)], verbose_name='p-value for VARMA')),
                ('q', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(3)], verbose_name='q-value for VARMA')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='Date and Time Added')),
                ('date_modified', models.DateTimeField(auto_now=True, verbose_name='Date and Time Modified')),
            ],
        ),
        migrations.CreateModel(
            name='VECM',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('p', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(60)], verbose_name='p-value for VECM')),
                ('seasons', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(72)], verbose_name='Seasons')),
                ('deterministic', models.CharField(choices=[('NC', 'nc'), ('C', 'c'), ('CT', 'ct')], max_length=3, verbose_name='Deterministic')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='Date and Time Added')),
                ('date_modified', models.DateTimeField(auto_now=True, verbose_name='Date and Time Modified')),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='vecm',
            unique_together={('p', 'seasons', 'deterministic')},
        ),
        migrations.AlterUniqueTogether(
            name='varma',
            unique_together={('p', 'q')},
        ),
        migrations.AddField(
            model_name='technique',
            name='var',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='pyyc.VAR'),
        ),
        migrations.AddField(
            model_name='technique',
            name='varma',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='pyyc.VARMA'),
        ),
        migrations.AddField(
            model_name='technique',
            name='vecm',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='pyyc.VECM'),
        ),
        migrations.AlterUniqueTogether(
            name='raw',
            unique_together={('last_date', 'inflation', 'output_gap', 'n_diffs')},
        ),
        migrations.AddField(
            model_name='principalcomponents',
            name='raw',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pyyc.RAW'),
        ),
        migrations.AddField(
            model_name='forecast',
            name='technique',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pyyc.Technique'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='pc',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='pyyc.PrincipalComponents'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='raw',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='pyyc.RAW'),
        ),
        migrations.AddField(
            model_name='cointegration',
            name='dataset',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pyyc.Dataset'),
        ),
        migrations.AlterUniqueTogether(
            name='principalcomponents',
            unique_together={('raw', 'n')},
        ),
        migrations.AlterUniqueTogether(
            name='cointegration',
            unique_together={('dataset', 'p', 'deterministic', 'root_crit')},
        ),
    ]
